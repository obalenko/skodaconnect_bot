import os
import re
import requests
import telegram
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
from core.connect_service import SkodaConnectService, get_vehicle_base_info


TOKEN = os.getenv('TOKEN')
CLIENT_ID = 'YOUR_CLIENT_ID'
CLIENT_SECRET = 'YOUR_CLIENT_SECRET'
REDIRECT_URI = 'YOUR_REDIRECT_URI'

# Conversation states
EMAIL, PASSWD, CAR_SELECTION, ACTION_SELECTION = range(4)


def vehicle_info_normalization(vehicle):
    vehicle_info = get_vehicle_base_info(vehicle)
    vehicle_name = f'{vehicle_info["model"]} ' \
                   f'{vehicle_info["manufactured"][0:4]} ' \
                   f'{vehicle_info["engine_capacity"]} ' \
                   f'{vehicle_info["engine_type"]}'
    return vehicle_name


def validate_email(email):
    return bool(re.match(r"[^@]+@[^@]+\.[^@]+", email))


async def start(update, context):
    # authorization_url = get_authorization_url()
    user = update.effective_user

    if context.user_data:
        return ConversationHandler.END
    await update.message.reply_html(
        f'–ü—Ä–∏–≤—ñ—Ç, {user.full_name}! \n'
        f'–ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∏ –º–æ–∂–µ—à –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—î—é –∞–≤—Ç—ñ–≤–∫–æ—é Skoda! \n'
        '\n'
        '–ú–µ–Ω–µ –ª–∏—à–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —ñ–∑ —Ç–≤–æ—ó–º –æ–±–ª—ñ–∫–æ–≤–∏–º –∑–∞–ø–∏—Å–æ–º Skoda Connect, –∞ –ø—Ä–æ –≤—Å–µ —ñ–Ω—à–µ —è –ø–æ–¥–±–∞—é! üíö\n'
        '\n'
    )
    await update.message.reply_text(
        rf'üìß –í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É, –∞—Å–æ—Ü—ñ–π–æ–≤–∞–Ω—É –∑ –∞–∫–∞—É–Ω—Ç–æ–º —É —Å–µ—Ä–≤—ñ—Å—ñ Skoda Connect'
    )

    return EMAIL


async def email(update, context) -> int:
    '''Get email from user to authorize in Skoda Connect service.'''
    chat_id = update.message.chat_id
    text = update.message.text

    if not validate_email(text):
        await context.bot.send_message(chat_id=chat_id, text='–ù–∞–ø–∏—à–∏ –±—É–¥—å –ª–∞—Å–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É!')
        return EMAIL

    context.user_data['email'] = text
    await update.message.reply_text(f'üîë –¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –ø–∞—Ä–æ–ª—å')

    return PASSWD


async def passwd(update, context) -> int:
    '''Get password from user to authorize in Skoda Connect service'''
    text = update.message.text
    context.user_data['password'] = text
    await update.message.reply_text(f'üîÑ –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å —É —Å–µ—Ä–≤—ñ—Å—ñ Skoda Connect...')
    user_data = context.user_data

    conn_service = SkodaConnectService(user_data.get('email'), user_data.get('password'))
    await conn_service.session_init()
    # connection instance
    connection = conn_service.get_connection_instance()

    if conn_service is not None:
        await update.message.reply_text(f'‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –ø—Ä–æ —Ç–≤–æ—ó –∞–≤—Ç–æ... üöó ')
        await conn_service.retrieve_vehicles()

        if len(conn_service.vehicles) < 1:
            await update.message.reply_text(f'–ù–µ –∑–Ω–∞–π—à–æ–≤ –∂–æ–¥–Ω–æ—ó –∞–≤—Ç—ñ–≤–∫–∏ —É —Ç–≤–æ—î–º—É –≥–∞—Ä–∞–∂—ñ ü§∑‚Äç‚ôÇÔ∏è')
        else:
            await update.message.reply_text(f'–ó–Ω–∞–π—à–æ–≤ {len(connection.vehicles)} –∞–≤—Ç–æ –≤ —Ç–≤–æ—î–º—É –≥–∞—Ä–∞–∂—ñ \n')

            context.user_data['connection'] = connection
    else:
        await update.message.reply_text(f'–£–ø—Å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ —É—Å–ø—ñ—à–Ω–∞, —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É.')
        return ConversationHandler.END

    context.user_data['cars'] = [vehicle_info_normalization(x) for x in connection.vehicles]
    context.user_data['selected_car'] = None
    reply_markup = build_car_selection_keyboard(context.user_data['cars'])
    await update.message.reply_text('Authorization successful. Please select a car:', reply_markup=reply_markup)

    return CAR_SELECTION


async def garage(update, context):
    # Clear the selected car and show the car selection menu again
    context.user_data['selected_car'] = None
    reply_markup = build_car_selection_keyboard(context.user_data['cars'])
    await update.message.reply_text('Please select a car:', reply_markup=reply_markup)
    return CAR_SELECTION


async def car_selection(update, context):
    query = update.callback_query
    selected_car = query.data
    context.user_data['selected_car'] = selected_car
    reply_markup = build_action_selection_keyboard()
    await query.answer()
    await query.message.reply_text(f'–û–±—Ä–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É {query.data}')
    await query.message.reply_text(text='Please select an action:', reply_markup=reply_markup)
    return ACTION_SELECTION


async def action_selection(update, context):
    query = update.callback_query
    selected_action = query.data
    # Do something with the selected car and action here
    await query.edit_message_text(text=f"You selected {selected_action} for {context.user_data['selected_car']}.")
    # Rebuild the action selection keyboard and send it to the user again
    reply_markup = build_action_selection_keyboard()
    await query.message.reply_text('Please select another action:', reply_markup=reply_markup)
    return ACTION_SELECTION



def build_car_selection_keyboard(cars):
    keyboard = [[telegram.InlineKeyboardButton(car, callback_data=car)] for car in cars]
    return telegram.InlineKeyboardMarkup(keyboard)


# def build_action_selection_keyboard():
#
#     keyboard = [[telegram.InlineKeyboardButton('–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', callback_data='base_info')],
#                 [telegram.InlineKeyboardButton('–®–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç –ø–æ —Å—Ç–∞–Ω—É –∞–≤—Ç–æ', callback_data='gen_quick_report')],
#                 [telegram.InlineKeyboardButton('–î–∞–Ω—ñ –ø—Ä–æ –ø–æ—ó–∑–¥–∫–∏', callback_data='trip_report')],
#                 [telegram.InlineKeyboardButton('–°–µ—Ä–≤—ñ—Å–Ω—ñ –∞–∫—Ü—ñ—ó', callback_data='service_promo')],
#                 [telegram.InlineKeyboardButton('–ó–∞–ø–∏—Å –Ω–∞ —Å–µ—Ä–≤—ñ—Å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è', callback_data='service_maintenance')],
#                 [telegram.InlineKeyboardButton('–°—Ç–∞–Ω –≤—ñ–∫–æ–Ω/–¥–≤–µ—Ä–µ–π', callback_data='win_door_state')],
#                 [telegram.InlineKeyboardButton('–ó–∞–ø–∞—Å –ø–∞–ª–∏–≤–∞', callback_data='fuel_level')],
#                 [telegram.InlineKeyboardButton('–õ–æ–∫–∞—Ü—ñ—è –∞–≤—Ç–æ', callback_data='location')],
#                 [telegram.InlineKeyboardButton('–í—ñ–¥–¥–∞–ª–µ–Ω—ñ –≤–∫–∞–∑—ñ–≤–∫–∏', callback_data='remote_commands')]]
#
#     return telegram.InlineKeyboardMarkup(keyboard)


def build_action_selection_keyboard():

    keyboard = [['–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', '–®–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç –ø–æ —Å—Ç–∞–Ω—É –∞–≤—Ç–æ', '–î–∞–Ω—ñ –ø—Ä–æ –ø–æ—ó–∑–¥–∫–∏', '–°–µ—Ä–≤—ñ—Å–Ω—ñ –∞–∫—Ü—ñ—ó',
                '–ó–∞–ø–∏—Å –Ω–∞ —Å–µ—Ä–≤—ñ—Å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è', '–°—Ç–∞–Ω –≤—ñ–∫–æ–Ω/–¥–≤–µ—Ä–µ–π', '–ó–∞–ø–∞—Å –ø–∞–ª–∏–≤–∞', '–õ–æ–∫–∞—Ü—ñ—è –∞–≤—Ç–æ', '–í—ñ–¥–¥–∞–ª–µ–Ω—ñ –≤–∫–∞–∑—ñ–≤–∫–∏']]
    return telegram.ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def handle_action_selection(message):
    # Retrieve the selected option from the message
    selected_option = message.text

    # Perform an action based on the selected option
    if selected_option == '–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è':
        reply_text = '–¢—É—Ç –±—É–¥–µ –ø–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ'
    elif selected_option == '–®–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç –ø–æ —Å—Ç–∞–Ω—É –∞–≤—Ç–æ':
        reply_text = '–¢—É—Ç –±—É–¥–µ —à–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Å—Ç–∞–Ω –∞–≤—Ç–æ'
    elif selected_option == '–î–∞–Ω—ñ –ø—Ä–æ –ø–æ—ó–∑–¥–∫–∏':
        reply_text = '–¢—É—Ç –±—É–¥—É—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ—ó–∑–¥–∫–∏'
    elif selected_option == '–°–µ—Ä–≤—ñ—Å–Ω—ñ –∞–∫—Ü—ñ—ó':
        reply_text = '–¢—É—Ç –±—É–¥—É—Ç—å —Å–µ—Ä–≤—ñ—Å–Ω—ñ –∞–∫—Ü—ñ—ó'
    elif selected_option == '–ó–∞–ø–∏—Å –Ω–∞ —Å–µ—Ä–≤—ñ—Å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è':
        reply_text = '–¢—É—Ç –±—É–¥–µ –∑–∞–ø–∏—Å –Ω–∞ —Å–µ—Ä–≤—ñ—Å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è'
    elif selected_option == '–°—Ç–∞–Ω –≤—ñ–∫–æ–Ω/–¥–≤–µ—Ä–µ–π':
        reply_text = '–¢—É—Ç –±—É–¥–µ —Å—Ç–∞–Ω –≤—ñ–∫–æ–Ω/–¥–≤–µ—Ä–µ–π'
    elif selected_option == '–ó–∞–ø–∞—Å –ø–∞–ª–∏–≤–∞':
        reply_text = '–¢—É—Ç –±—É–¥–µ –∑–∞–ø–∞—Å –ø–∞–ª–∏–≤–∞'
    elif selected_option == '–õ–æ–∫–∞—Ü—ñ—è –∞–≤—Ç–æ':
        reply_text = '–¢—É—Ç –±—É–¥–µ –ª–æ–∫–∞—Ü—ñ—è –∞–≤—Ç–æ'
    elif selected_option == '–í—ñ–¥–¥–∞–ª–µ–Ω—ñ –≤–∫–∞–∑—ñ–≤–∫–∏':
        reply_text = '–¢—É—Ç –±—É–¥—É—Ç—å –≤—ñ–¥–¥–∞–ª–µ–Ω—ñ –≤–∫–∞–∑—ñ–≤–∫–∏'
    else:
        reply_text = '–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è'

    return reply_text


async def handle_message(update, context):
    message = update.message
    reply_text = handle_action_selection(message)
    await message.reply_text(reply_text)


def get_authorization_url():
    url = f'https://oauth3.example.com/authorize?client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}'
    return url


def get_access_token(authorization_code):
    url = 'https://oauth3.example.com/token'
    payload = {
        'grant_type': 'authorization_code',
        'code': authorization_code,
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'redirect_uri': REDIRECT_URI
    }
    response = requests.post(url, data=payload)
    if response.ok:
        return response.json()['access_token']
    else:
        return None


def main():
    # Create an instance of the Updater class
    application = Application.builder().token(TOKEN).build()

    # Add conversation handler for handling the /start command
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
            PASSWD: [MessageHandler(filters.TEXT & ~filters.COMMAND, passwd)],
            CAR_SELECTION: [CallbackQueryHandler(car_selection)],
            ACTION_SELECTION: [CallbackQueryHandler(action_selection)]
        },
        fallbacks=[CommandHandler('garage', garage)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)
    application.add_handler(telegram.ext.MessageHandler(filters.TEXT, handle_message))

    # Add message handler for handling OAuth3 authorization - future development
    # message_handler = MessageHandler(filters.Regex(r'^https://oauth3.example.com/.*$'), oauth3_callback)
    # application.add_handler(message_handler)

    application.run_polling()
    application.idle()


if __name__ == '__main__':
    main()