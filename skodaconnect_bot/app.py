import os
from typing import Dict

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    ConversationHandler,
    filters
)
from core.auth import sc_login

TOKEN = os.getenv('TOKEN')
SETUP, EMAIL, PASSWD = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Send a welcome message when the command /start is issued"""
    user = update.effective_user
    if context.user_data:
        return ConversationHandler.END

    await update.message.reply_html(
        rf'–ü—Ä–∏–≤—ñ—Ç {user.full_name}! –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∏ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–∏ –∑—ñ —Å–≤–æ—î—ó –∞–≤—Ç—ñ–≤–∫–∏ Skoda!' +
        ' –ú–µ–Ω–µ –ª–∏—à–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —ñ–∑ —Ç–≤–æ—ó–º –æ–±–ª—ñ–∫–æ–≤–∏–º –∑–∞–ø–∏—Å–æ–º Skoda Connect, –∞ –ø—Ä–æ –≤—Å–µ —Ä–µ—à—Ç–∞ —è –ø–æ–¥–±–∞—é! üíö' +
        ' –©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –∫–æ–º–∞–Ω–¥—É /setup'
    )

    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text("–û—Ç —Ö–∞–ª–µ–ø–∞ ‚òπÔ∏è, –º—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ —â–µ –Ω–∞ –Ω–∞–ø–∏—Å–∞–≤ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∑ –æ–ø–∏—Å–æ–º –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ :( "
                                    "–í—ñ–Ω –≤–∂–µ –ø—Ä–∞—Ü—é—î –Ω–∞–¥ —Ü–∏–º!")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    await update.message.reply_text(
        "–ô–æ–ª–∫—ñ-–ø–∞–ª–∫–∏! –¢–∏ –ø–µ—Ä–µ—Ä–≤–∞–≤ –ø—Ä–æ—Ü–µ—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –ø–æ—á–∏–Ω–∞—Ç–∏ –∑ –ø–æ—á–∞—Ç–∫—É! ü´£ "
    )

    return ConversationHandler.END


async def setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starting point to setup Skoda Connect account synchronization."""
    if context.user_data:
        await update.message.reply_text(
            rf'–°—Ö–æ–∂–µ, —â–æ —Ç–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'
        )
        return ConversationHandler.END

    await update.message.reply_text(
        rf'üìß –í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É, –∞—Å–æ—Ü—ñ–π–æ–≤–∞–Ω—É –∑ –∞–∫–∞—É–Ω—Ç–æ–º —É Skoda Connect'
    )
    return EMAIL


async def email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Get email from user to authorize in Skoda Connect."""
    text = update.message.text
    context.user_data["email"] = text
    await update.message.reply_text(f'üîë –¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –ø–∞—Ä–æ–ª—å')

    return PASSWD


async def passwd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Get password from user to authorize in Skoda Connect"""
    text = update.message.text
    context.user_data["password"] = text
    await update.message.reply_text(f'üîÑ –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å —É Skoda Connect...')

    # show user data
    user_data = context.user_data

    login_result = await sc_login(user_data.get('email'), user_data.get('password'))
    if login_result:
        await update.message.reply_text(f'‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –Ø –æ—Ç—Ä–∏–º–∞–≤ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–≤—ñ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å üèé,'
                                        f' —Ç–æ–∂ —Ç–µ–ø–µ—Ä —É—Å–µ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –ø–∏—Ç–∞–π —É –º–µ–Ω–µ üòâ')
    else:
        await update.message.reply_text(f'‚ùå –ù–∞ –∂–∞–ª—å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ —É—Å–ø—ñ—à–Ω–∞!')

    return ConversationHandler.END


if __name__ == '__main__':
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    credentials_handler = ConversationHandler(
        entry_points=[CommandHandler("setup", setup)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
            PASSWD: [MessageHandler(filters.TEXT & ~filters.COMMAND, passwd)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(credentials_handler)
    application.run_polling()