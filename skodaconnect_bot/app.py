import os
from typing import Dict

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    ConversationHandler,
    filters
)

TOKEN = os.getenv('TOKEN')
SETUP, EMAIL, PASSWD = range(3)


def data_to_str(user_data: Dict[str, str]) -> str:
    """Helper function for formatting the gathered user info."""
    data = [f"{key} - {value}" for key, value in user_data.items()]
    return "\n".join(data).join(["\n", "\n"])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Send a welcome message when the command /start is issued"""
    user = update.effective_user
    if context.user_data:
        return ConversationHandler.END

    await update.message.reply_html(
        rf'–ü—Ä–∏–≤—ñ—Ç {user.full_name}! –Ø –∑–Ω–∞—é –≤—Å–µ –ø—Ä–æ —Ç–≤—ñ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å Skoda!' +
        ' –ü—Ä–æ—Å—Ç–æ –æ–±–µ—Ä–∏, –ø—Ä–æ —â–æ –± —Ç–∏ —Ö–æ—Ç—ñ–≤(–ª–∞) –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, –∞ —è –ø—Ä–æ –≤—Å–µ –ø–æ–¥–±–∞—é!' +
        ' –©–æ–± —è –º—ñ–≥ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å –∑ —Ç–æ–±–æ—é —ñ —Ç–≤–æ—ó–º –∞–≤—Ç–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ç–≤—ñ–π —ñ—Å–Ω—É—é—á–∏–π –∞–∫–∞—É–Ω—Ç SkodaConnect' +
        ' –î–ª—è —Ü—å–æ–≥–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∫–æ–º–∞–Ω–¥—É /setup'
    )

    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text("–û—Ç —Ö–∞–ª–µ–ø–∞ ‚òπÔ∏è, –º—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ —â–µ –Ω–∞ –Ω–∞–ø–∏—Å–∞–≤ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∑ –æ–ø–∏—Å–æ–º –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ :( "
                                    "–û–±—ñ—Ü—è—é –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ü–µ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ ")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    await update.message.reply_text(
        "–ë—É–≤–∞–π!üëã –ë—É–¥—É —Ä–∞–¥–∏–π –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å —â–µ —É –±—É–¥—å-—è–∫–∏–π —á–∞—Å!"
    )

    return ConversationHandler.END


async def setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starting point to setup Skoda Connect account synchronization."""
    if context.user_data:
        await update.message.reply_text(
            rf'–°—Ö–æ–∂–µ, —Ç–≤—ñ–π –∞–∫–∞—É–Ω—Ç –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.'
        )
        return ConversationHandler.END

    await update.message.reply_text(
        rf'–î–∞–≤–∞–π –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ç–≤—ñ–π –∞–∫–∞—É–Ω—Ç. –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É, –Ω–∞ —è–∫—É —Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É SkodaConnect'
    )
    return EMAIL


async def email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Get email from user to authorize in SkodaConnect."""
    text = update.message.text
    context.user_data["email"] = text
    await update.message.reply_text(f'–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –ø–∞—Ä–æ–ª—å')

    return PASSWD


async def passwd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Get password from user to authorize in SkodaConnect"""
    text = update.message.text
    context.user_data["password"] = text
    await update.message.reply_text(f'–ß—É–¥–æ–≤–æ, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –Ø –æ—Ç—Ä–∏–º–∞–≤ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–≤—ñ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å üèé,'
                                    f' —Ç–æ–∂ —Ç–µ–ø–µ—Ä —É—Å–µ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –ø–∏—Ç–∞–π —É –º–µ–Ω–µ üòâ')

    # show user data
    user_data = context.user_data
    await update.message.reply_text(data_to_str(user_data))

    return ConversationHandler.END


if __name__ == '__main__':
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    credentials_handler = ConversationHandler(
        entry_points=[CommandHandler("setup", setup)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
            PASSWD: [MessageHandler(filters.TEXT & ~filters.COMMAND, passwd)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(credentials_handler)
    application.run_polling()